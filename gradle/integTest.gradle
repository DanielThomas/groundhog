sourceSets {
  integTest {
    compileClasspath += main.output + test.output
    runtimeClasspath += main.output + test.output
  }
}

configurations {
  integTestCompile.extendsFrom testCompile
  integTestRuntime.extendsFrom testRuntime
}

task integTest(type: Test) {
  testClassesDir = sourceSets.integTest.output.classesDir
  classpath = sourceSets.integTest.runtimeClasspath
  testSrcDirs = []
}

check.dependsOn(integTest)

plugins.withType(org.gradle.plugins.ide.idea.IdeaPlugin) {
  idea {
    module {
      testSourceDirs += sourceSets.integTest.groovy.srcDirs
      testSourceDirs += sourceSets.integTest.resources.srcDirs
      scopes.TEST.plus.add(configurations.integTestCompile)
      scopes.TEST.plus.add(configurations.integTestRuntime)
    }
  }
}

plugins.withType(org.gradle.plugins.ide.eclipse.EclipsePlugin) {
  eclipse {
    classpath {
      plusConfigurations.add(configurations.integTestCompile)
      plusConfigurations.add(configurations.integTestRuntime)
    }
  }
}

// These tasks allow integTest tests and resources to be provided to every project by :core
def coreProject = project(':core')
def jmeterProject = project(':jmeter')
if (coreProject != project && jmeterProject != project) {
  task copyCoreIntegTestClasses(type: Copy) {
    description 'Copy core project integTest classes to the current project'
    from coreProject.sourceSets.integTest.output.classesDir
    into sourceSets.integTest.output.classesDir
    dependsOn ':core:compileIntegTestGroovy'
  }
  task copyCoreIntegTestResources(type: Copy) {
    description 'Copy core project integTest resources to the current project'
    from coreProject.sourceSets.integTest.output.resourcesDir
    into sourceSets.integTest.output.resourcesDir
    dependsOn ':core:processIntegTestResources'
  }

  integTest.dependsOn(copyCoreIntegTestClasses)
  integTest.dependsOn(copyCoreIntegTestResources)
}
